
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>Google Maps</title>
    @Styles.Render("~/Content/css/admin_bundle")
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/Content/js/admin_manager_chef_bundle")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 500px;
            width: 70%;
            display: block;
            margin: initial;
            border: solid;
        }

        #floating-panel {
            position: absolute;
            top: 10px;
            left: 25%;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
            text-align: center;
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }

        #right-panel {
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }

            #right-panel select, #right-panel input {
                font-size: 15px;
            }

            #right-panel select {
                width: 100%;
            }

            #right-panel i {
                font-size: 12px;
            }

        #right-panel {
            height: 500px;
            float: right;
            width: 390px;
            overflow: auto;
        }

        #map {
            margin-right: 400px;
        }

        #floating-panel {
            background: #fff;
            padding: 5px;
            font-size: 14px;
            font-family: Arial;
            border: 1px solid #ccc;
            box-shadow: 0 2px 2px rgba(33, 33, 33, 0.4);
            display: none;
        }

        @@media print {
            #map {
                height: 500px;
                margin: 0;
            }

            #right-panel {
                float: none;
                width: auto;
            }
        }

        #pickups, h2 {
            text-align: center;
        }

        .k-grid-Pickup {
            margin-left: 55px !important;
            color: white;
            background-color: green;
        }
    </style>
</head>

<body>
    <div id="pickups">
        <h2>Orders Waiting to Be Picked Up</h2>
    </div>
    <div id="pickup_grid" style="margin-bottom: 50px;"></div>
    <div id="floating-panel">
        <strong>Start:</strong>
        <select id="start">
            <option value="40.820331, -73.949283">Center</option>
        </select>
        <br>
        <strong>End:</strong>
        <select id="end">
            <option value="2512 tratman avenue">-- Select --</option>
        </select>

        <script>
            $(document).ready(function() {


            });
        </script>

    </div>
    <div id="right-panel"></div>
    <div id="map"></div>
</body>
</html>
<script type="text/javascript">
    var customLabel = {
        restaurant: {
            label: 'R'
        },
    };

    var pickup_list = []; 
    var chef_orders = [];

    function initMap() {
        var hfinn = { lat: 40.825854, lng: -73.946765 };
        var jsushi = { lat: 40.824129, lng: -73.951872 };
        var hham = { lat: 40.804155, lng: -73.955857 };
        var addresses = [hfinn, jsushi, hham];
        var chefNames = ['Harold Finn', 'Jack Sushi', 'Hank Ham'];
        var directionsDisplay = new google.maps.DirectionsRenderer;
        var directionsService = new google.maps.DirectionsService;
        var map = new google.maps.Map(document.getElementById('map'), {
            center: new google.maps.LatLng(40.820331, -73.949283),
            zoom: 13
        });

        var infoWindow = new google.maps.InfoWindow;
        var marker, i;

        //This inserts the addresses of the users into the end box on the map
        $(document).ready(function () {
            //console.log('remaking'); 
            //var newOption = document.createElement('option');
            //newOption.setAttribute("value", "2512 tratman avenue");
            //newOption.innerText= "NAME";
            //document.all.end.options.add(newOption);

            var orders = []
            pickup_list =@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(this.Model));
            //$.ajax({
            //    url: "Delivery/GetOrders",
            //    type: "GET",
            //    async: false,
            //    success: function (result) {
            //        orders = result;
            //    },
            //});

            console.log(pickup_list)

        });

        for (i = 0; i < addresses.length; i++) {
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(addresses[i]),
                label: chefNames[i][0],
                map: map
            });

            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    if(i == 3)
                        i = 0; 

                    console.log(i); 
                    infoWindow.setContent(chefNames[i]);
                    infoWindow.open(map, marker);
                    chef_orders.length = 0; 
                    for( j = 0; j < pickup_list.length; j++ )
                    {
                        if( pickup_list[j].ChefName == chefNames[i] )
                        {
                            chef_orders.push(pickup_list[j]);
                        }
                    }
                    //console.log('filtered list', chef_orders);

                    $("#end").empty(); 

                    var endpoints = []; 

                    for(i = 0; i < chef_orders.length; i++)
                    {
                        var newOption = document.createElement('option');
                        newOption.setAttribute("value", chef_orders[i].Address);
                        newOption.innerText = 'Order ' +  chef_orders[i].ID;
                        endpoints.push(newOption); 
                    }

                    //console.log('endpoints:', endpoints); 

                    $("#end").append('<option value="40.820331, -73.949283">-- Select --</option>')
                    
                    for(x = 0; x  < endpoints.length; x++)
                    {

                        $("#end").append(endpoints[x]); 
                    }

                    var orders = [];
                    function GetOrders() {
                        $.ajax({
                            url: "/Delivery/GetOrders",
                            type: "GET",
                            async: false,
                            success: function (result) {
                                orders = result;
                            },
                        });
                    }

                        $("#pickup_grid").kendoGrid({
                            dataSource: {
                                transport:
                                {
                                    read: function (options) {
                                        options.success(chef_orders);
                                    },
                                },
                                schema: {
                                    model: {
                                        id: "ID",
                                        fields:
                                        {
                                            Username: { type: "string" },
                                            Item: { type: "string" },
                                            ChefName: { type: "string" },
                                            Address: {type: "string"},
                                            Cost: {type: "double"},
                                            Quantity: {type: "double"},
                                            Timestamp: {type: "string"}
                                        }
                                    }
                                }
                            },

                            columns:
                            [
                                { field: "ID", title: "Order ID", template: function (dataItem) { return "<center>" + dataItem.ID + "</center>" } },
                                { field: "Username", title: "Username", template: function (dataItem) { return "<center>" + dataItem.Username + "</center>" } },
                                { field: "Item", title: "Food", template: function (dataItem) { return "<center>" + dataItem.Item + "</center>"; } },
                                { field: "ChefName", title: "Chef Name", template: function (dataItem) { return "<center>" + dataItem.ChefName + "</center>" } },
                                { field: "Address", title: "Address", template: function (dataItem) { return "<center>" + dataItem.Address + "</center>" } },
                                { field: "Cost", title: "Cost", template: function (dataItem) { return "<center>" + dataItem.Cost + "</center>" } },
                                { field: "Quantity", title: "Quantity", template: function (dataItem) { return "<center>" + dataItem.Quantity + "</center>" } },
                                { field: "Timestamp", title: "Timestamp", template: function (dataItem) { return "<center>" + dataItem.Timestamp + "</center>" } },
                            ],
                        });
                    
                        //function PickupOrder(e){
                        //    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                        //    console.log(dataItem); 
                        //    $.ajax
                        //        ({
                        //            url: '/Delivery/DeleteOrder',
                        //            type: "POST",
                        //            data: { 'ID': dataItem.ID },
                        //            success: function (result) {
                        //                console.log('order deleted'); 
                        //                $('#pickup_grid').data('kendoGrid').dataSource.read();
                        //                $('#pickup_grid').data('kendoGrid').refresh();
                        //            }
                        //        });
                        //}

                }
            })(marker, i));
        }


        // Change this depending on the name of your PHP or XML file
        downloadUrl('https://storage.googleapis.com/mapsdevsite/json/mapmarkers2.xml', function (data) {
            var xml = data.responseXML;
            var markers = xml.documentElement.getElementsByTagName('marker');
            Array.prototype.forEach.call(markers, function (markerElem) {
                var id = markerElem.getAttribute('id');
                var name = markerElem.getAttribute('name');
                var address = markerElem.getAttribute('address');
                var type = markerElem.getAttribute('type');
                var point = new google.maps.LatLng(
                    parseFloat(markerElem.getAttribute('lat')),
                    parseFloat(markerElem.getAttribute('lng')));

                var infowincontent = document.createElement('div');
                var strong = document.createElement('strong');
                strong.textContent = name
                infowincontent.appendChild(strong);
                infowincontent.appendChild(document.createElement('br'));

                var text = document.createElement('text');
                text.textContent = address
                infowincontent.appendChild(text);
                var icon = customLabel[type] || {};
                var marker = new google.maps.Marker({
                    map: map,
                    position: point,
                    label: icon.label
                });
                marker.addListener('click', function () {
                    infoWindow.setContent(infowincontent);
                    infoWindow.open(map, marker);
                });
            });
        });

        directionsDisplay.setMap(map);
        directionsDisplay.setPanel(document.getElementById('right-panel'));

        var control = document.getElementById('floating-panel');
        control.style.display = 'block';
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

        var onChangeHandler = function() {
            calculateAndDisplayRoute(directionsService, directionsDisplay);
        };
        document.getElementById('start').addEventListener('change', onChangeHandler);
        document.getElementById('end').addEventListener('change', onChangeHandler);
    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        var start = document.getElementById('start').value;
        var end = document.getElementById('end').value;
        directionsService.route({
            origin: start,
            destination: end,
            travelMode: 'DRIVING'
        }, function(response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });

    }



    function downloadUrl(url, callback) {
        var request = window.ActiveXObject ?
            new ActiveXObject('Microsoft.XMLHTTP') :
            new XMLHttpRequest;

        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                request.onreadystatechange = doNothing;
                callback(request, request.status);
            }
        };

        request.open('GET', url, true);
        request.send(null);
    }

    function doNothing() { }
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDM_C8-I_OCJj9tNnYfsjhsDY8oE9YpvCI&callback=initMap">
</script>
